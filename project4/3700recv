#!/usr/bin/env python3
#
# CS3700, Fall 2021
# TCP Project Starter Code


import datetime
import json
import sys
import socket

from base64 import b64decode

# Message Fields
SEQN = "sequence"
DATA = "data"
ACK = "ack"
SACK = "sack"
EOF = "eof"


def log(string):
  sys.stderr.write(datetime.datetime.now().strftime("%H:%M:%S.%f") + " 3700recv: " + string + "\n")

MSG_SIZE = 1500
TIMEOUT = 30
TEARDOWN_ACKS = 5

READ_DATA = 0
RECEIVED_PACKETS = []

# Bind to localhost and an ephemeral port
UDP_IP = "127.0.0.1"
UDP_PORT = int(sys.argv[1])

# Set up the socket
sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
sock.bind((UDP_IP, UDP_PORT))
sock.settimeout(TIMEOUT)

# Get port we bound to
UDP_PORT = sock.getsockname()[1]
log("[bound] " + str(UDP_PORT))
# Now listen for packets
while True:
  result = sock.recvfrom(MSG_SIZE)

  # If nothing is ready, we hit the timeout
  if result:
    (data, addr) = result

    try:
      decoded = json.loads(data.decode())

      # If the EOF flag is set, exit
      if (decoded['eof']):
        if decoded[SEQN] == READ_DATA:
          log("[complete]")
          for x in range(TEARDOWN_ACKS):
            # Send back an ACK to the sender.
            msg = json.dumps({ACK: decoded[SEQN], SACK: decoded[SEQN]})
            log("ABOUT TO SEND EOF " + msg)
            if sock.sendto(msg.encode(), addr) < len(msg):
              log("[error] unable to fully send packet")
        log("[complete]")
        sys.exit(0)
    
      #else:
      # If there is data, we accept it and print it out
      if (decoded['data']):
        sequence_number = decoded[SEQN]

        # If we receive data, we assume it's in-order
        # You will need to do much more here
        current_buffered_sequence_numbers = list(map(lambda packet: packet[SEQN], RECEIVED_PACKETS))
        if sequence_number >= READ_DATA and not sequence_number in current_buffered_sequence_numbers:
          if sequence_number == READ_DATA:
            log(f"[recv data] {sequence_number} ({len(decoded['data'])}) ACCEPTED (in-order)")
          else:
            log(f"[recv data] {sequence_number} ({len(decoded['data'])}) ACCEPTED (out-of-order)")
          RECEIVED_PACKETS.append(decoded)
        else:
          log("IGNORED")
        # log("[recv data] " + str(decoded['sequence']) + " (" + str(len(data)) + ") ACCEPTED (in-order)")
        # sys.stdout.buffer.write(b64decode(decoded['data'].encode()))



      # process_received_packets()
      sorted_packets = sorted(RECEIVED_PACKETS, key=lambda packet: packet[SEQN])
      for packet in sorted_packets:
        if packet[SEQN] == READ_DATA:
          data = b64decode(packet[DATA].encode())
          sys.stdout.buffer.write(data)
          READ_DATA = packet[SEQN] + len(data)
      RECEIVED_PACKETS = list(filter(lambda packet: packet[SEQN] > READ_DATA, sorted_packets))



      # Send back an ack to the sender
      msg = json.dumps({"ack": READ_DATA, "sack": decoded[SEQN]})
      log("ABOUT TO SEND " + msg)
      sent = sock.sendto(msg.encode(), addr)
      log("[sent] " + str(sent))
      if sent < len(msg):
        log("[error] unable to fully send packet")

    except (ValueError, KeyError, TypeError) as e:
      log("[recv corrupt packet]")
      raise e
  else:
    log("[error] timeout")
    sys.exit(-1)